@page "/"
@using System.Text.Json
<button @onclick="Remove">Remove One</button>
<button @onclick="Add">
    Add
</button><div class="row">
    <div class="col-6">Sortable List
        
            <SortGroup Items="items" Id="@Id1" Class="list-group" TemplateClass="list-group-item" @ref="MyGroup" TItem="Items" GroupName="test" OnAdd="OnAdd" OnSort="OnSort" OnRemove="OnRemove" Handle=".my-handle">
                <Template Context="test">
                    <span class="oi oi-move my-handle"></span> @test.Data.Text - @test.Data.Id
                </Template>
            </SortGroup>
        
        Same Group
        <SortGroup Items="items2" Id="@Id2" Class="list-group" TemplateClass="list-group-item" OnAdd="OnAdd" OnSort="OnSort" OnRemove="OnRemove" TItem="Items" @ref="My2Group" GroupName="test">
            <Template Context="test">
                @test.Data.Text - @test.Data.Id
            </Template>
        </SortGroup>
        </div>
    <div class="col-6">
     
        List 1 Raw Contents
        <ul class="list-group">
            @foreach (var item in items.OrderBy(q => q.Order))
            {
                <li class="list-group-item">@item.Order - @item.Text - @item.Id</li>
            }
        </ul>
        List 2 Raw Contents
        <ul class="list-group">
            @foreach (var item in items2.OrderBy(q => q.Order))
            {
                <li class="list-group-item">@item.Order -@item.Text - @item.Id</li>
            }
        </ul>
    </div>
</div>
Resulting For Gorup 2
<ul class="list-group">
    @foreach (var item in ResultsList)
    {
        <li class="list-group-item">@item.Text - @item.Order - @item.Id</li>
    }
</ul>

@code
{
    string Id1 = Guid.NewGuid().ToString();
    string Id2 = Guid.NewGuid().ToString();
    int Order = 0;
    SortGroup<Items> MyGroup;
    SortGroup<Items> My2Group;
    List<Items> items { get; set; } = new List<Items>
{
        new Items("T1"),
        new Items("T2"),
        new Items("T3"),
    };
    List<Items> items2 { get; set; } = new List<Items>
{
        new Items("T4"),
        new Items("T5"),
        new Items("T6"),
    };
    List<Items> ResultsList { get; set; } = new List<Items>();

    public async Task Add()
    {
        items.Add(new Items("T8"));
        await MyGroup.UpdateAsync();
    }
    public async Task Remove()
    {
        // This is just a shortcut for the demo
        try
        {
            items.Remove(items.First());
        }
        catch{}
        // Inform Group of direct changes.
        await MyGroup.UpdateAsync();
        ResultsList = await My2Group.GetOrderListAsync("Order");
    }

    public async Task OnSort(SortableEvent<Items> e)
    {
        ResultsList = await My2Group.GetOrderListAsync("Order");
    }
    public async Task OnAdd(SortableEvent<Items> e)
    {
        // Changes are already tracked do not use UpdateAsync()
        if (e.Sender.Id == Id1)
        {
            items.Add(e.Data);
        }
        else
        {
            items2.Add(e.Data);
        }
        _= await MyGroup.GetOrderListAsync("Order");
        ResultsList = await My2Group.GetOrderListAsync("Order");
    }
    public async Task OnRemove(SortableEvent<Items> e)
    {
        // Changes are already tracked do not use UpdateAsync()
        if (e.Sender.Id == Id1)
        {
            var item = items.FirstOrDefault(q => q.Id == e.Data.Id);
            if (item != null)
                items.Remove(item);
        }
        else
        {
            var item = items2.FirstOrDefault(q => q.Id == e.Data.Id);
            if (item != null)
                items2.Remove(item);
        }
        _ = await MyGroup.GetOrderListAsync("Order");
        ResultsList = await My2Group.GetOrderListAsync("Order");
    }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }


    public class Items
    {
        public int Order { get; set; } = 0;
        public string Text { get; set; }
        public string Id { get; set; } = Guid.NewGuid().ToString();

        public Items()
        {

        }
        public Items(string text)
        {
            Text = text;
        }
    }
}